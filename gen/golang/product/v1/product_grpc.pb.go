// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: product/v1/product.proto

package productv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_AddAuthor_FullMethodName        = "/product.v1.ProductService/AddAuthor"
	ProductService_GetAllAuthors_FullMethodName    = "/product.v1.ProductService/GetAllAuthors"
	ProductService_GetAllBooks_FullMethodName      = "/product.v1.ProductService/GetAllBooks"
	ProductService_AddBook_FullMethodName          = "/product.v1.ProductService/AddBook"
	ProductService_GetBookByID_FullMethodName      = "/product.v1.ProductService/GetBookByID"
	ProductService_GetBooksByTitle_FullMethodName  = "/product.v1.ProductService/GetBooksByTitle"
	ProductService_GetBooksByAuthor_FullMethodName = "/product.v1.ProductService/GetBooksByAuthor"
	ProductService_GetBooksByGenre_FullMethodName  = "/product.v1.ProductService/GetBooksByGenre"
	ProductService_ModifyBookByID_FullMethodName   = "/product.v1.ProductService/ModifyBookByID"
	ProductService_DeleteBookByID_FullMethodName   = "/product.v1.ProductService/DeleteBookByID"
	ProductService_AddGenre_FullMethodName         = "/product.v1.ProductService/AddGenre"
	ProductService_GetAllGenres_FullMethodName     = "/product.v1.ProductService/GetAllGenres"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	AddAuthor(ctx context.Context, in *AddAuthorRequest, opts ...grpc.CallOption) (*AddAuthorResponse, error)
	GetAllAuthors(ctx context.Context, in *GetAllAuthorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllAuthorsResponse], error)
	GetAllBooks(ctx context.Context, in *GetAllBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllBooksResponse], error)
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error)
	GetBookByID(ctx context.Context, in *GetBookByIDRequest, opts ...grpc.CallOption) (*GetBookByIDResponse, error)
	GetBooksByTitle(ctx context.Context, in *GetBooksByTitleRequest, opts ...grpc.CallOption) (*GetBooksByTitleResponse, error)
	GetBooksByAuthor(ctx context.Context, in *GetBooksByAuthorRequest, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error)
	GetBooksByGenre(ctx context.Context, in *GetBooksByGenreRequest, opts ...grpc.CallOption) (*GetBooksByGenreResponse, error)
	ModifyBookByID(ctx context.Context, in *ModifyBookByIDRequest, opts ...grpc.CallOption) (*ModifyBookByIDResponse, error)
	DeleteBookByID(ctx context.Context, in *DeleteBookByIDRequest, opts ...grpc.CallOption) (*DeleteBookByIDResponse, error)
	AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error)
	GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllGenresResponse], error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) AddAuthor(ctx context.Context, in *AddAuthorRequest, opts ...grpc.CallOption) (*AddAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAuthorResponse)
	err := c.cc.Invoke(ctx, ProductService_AddAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllAuthors(ctx context.Context, in *GetAllAuthorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllAuthorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], ProductService_GetAllAuthors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllAuthorsRequest, GetAllAuthorsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllAuthorsClient = grpc.ServerStreamingClient[GetAllAuthorsResponse]

func (c *productServiceClient) GetAllBooks(ctx context.Context, in *GetAllBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllBooksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], ProductService_GetAllBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllBooksRequest, GetAllBooksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllBooksClient = grpc.ServerStreamingClient[GetAllBooksResponse]

func (c *productServiceClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, ProductService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBookByID(ctx context.Context, in *GetBookByIDRequest, opts ...grpc.CallOption) (*GetBookByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookByIDResponse)
	err := c.cc.Invoke(ctx, ProductService_GetBookByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBooksByTitle(ctx context.Context, in *GetBooksByTitleRequest, opts ...grpc.CallOption) (*GetBooksByTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByTitleResponse)
	err := c.cc.Invoke(ctx, ProductService_GetBooksByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBooksByAuthor(ctx context.Context, in *GetBooksByAuthorRequest, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByAuthorResponse)
	err := c.cc.Invoke(ctx, ProductService_GetBooksByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBooksByGenre(ctx context.Context, in *GetBooksByGenreRequest, opts ...grpc.CallOption) (*GetBooksByGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByGenreResponse)
	err := c.cc.Invoke(ctx, ProductService_GetBooksByGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ModifyBookByID(ctx context.Context, in *ModifyBookByIDRequest, opts ...grpc.CallOption) (*ModifyBookByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyBookByIDResponse)
	err := c.cc.Invoke(ctx, ProductService_ModifyBookByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteBookByID(ctx context.Context, in *DeleteBookByIDRequest, opts ...grpc.CallOption) (*DeleteBookByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookByIDResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteBookByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGenreResponse)
	err := c.cc.Invoke(ctx, ProductService_AddGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllGenresResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[2], ProductService_GetAllGenres_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllGenresRequest, GetAllGenresResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllGenresClient = grpc.ServerStreamingClient[GetAllGenresResponse]

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	AddAuthor(context.Context, *AddAuthorRequest) (*AddAuthorResponse, error)
	GetAllAuthors(*GetAllAuthorsRequest, grpc.ServerStreamingServer[GetAllAuthorsResponse]) error
	GetAllBooks(*GetAllBooksRequest, grpc.ServerStreamingServer[GetAllBooksResponse]) error
	AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error)
	GetBookByID(context.Context, *GetBookByIDRequest) (*GetBookByIDResponse, error)
	GetBooksByTitle(context.Context, *GetBooksByTitleRequest) (*GetBooksByTitleResponse, error)
	GetBooksByAuthor(context.Context, *GetBooksByAuthorRequest) (*GetBooksByAuthorResponse, error)
	GetBooksByGenre(context.Context, *GetBooksByGenreRequest) (*GetBooksByGenreResponse, error)
	ModifyBookByID(context.Context, *ModifyBookByIDRequest) (*ModifyBookByIDResponse, error)
	DeleteBookByID(context.Context, *DeleteBookByIDRequest) (*DeleteBookByIDResponse, error)
	AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error)
	GetAllGenres(*GetAllGenresRequest, grpc.ServerStreamingServer[GetAllGenresResponse]) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) AddAuthor(context.Context, *AddAuthorRequest) (*AddAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedProductServiceServer) GetAllAuthors(*GetAllAuthorsRequest, grpc.ServerStreamingServer[GetAllAuthorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAuthors not implemented")
}
func (UnimplementedProductServiceServer) GetAllBooks(*GetAllBooksRequest, grpc.ServerStreamingServer[GetAllBooksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedProductServiceServer) AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedProductServiceServer) GetBookByID(context.Context, *GetBookByIDRequest) (*GetBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByID not implemented")
}
func (UnimplementedProductServiceServer) GetBooksByTitle(context.Context, *GetBooksByTitleRequest) (*GetBooksByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByTitle not implemented")
}
func (UnimplementedProductServiceServer) GetBooksByAuthor(context.Context, *GetBooksByAuthorRequest) (*GetBooksByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedProductServiceServer) GetBooksByGenre(context.Context, *GetBooksByGenreRequest) (*GetBooksByGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByGenre not implemented")
}
func (UnimplementedProductServiceServer) ModifyBookByID(context.Context, *ModifyBookByIDRequest) (*ModifyBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBookByID not implemented")
}
func (UnimplementedProductServiceServer) DeleteBookByID(context.Context, *DeleteBookByIDRequest) (*DeleteBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookByID not implemented")
}
func (UnimplementedProductServiceServer) AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenre not implemented")
}
func (UnimplementedProductServiceServer) GetAllGenres(*GetAllGenresRequest, grpc.ServerStreamingServer[GetAllGenresResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddAuthor(ctx, req.(*AddAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllAuthors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllAuthorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetAllAuthors(m, &grpc.GenericServerStream[GetAllAuthorsRequest, GetAllAuthorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllAuthorsServer = grpc.ServerStreamingServer[GetAllAuthorsResponse]

func _ProductService_GetAllBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetAllBooks(m, &grpc.GenericServerStream[GetAllBooksRequest, GetAllBooksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllBooksServer = grpc.ServerStreamingServer[GetAllBooksResponse]

func _ProductService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBookByID(ctx, req.(*GetBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBooksByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBooksByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBooksByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBooksByTitle(ctx, req.(*GetBooksByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBooksByAuthor(ctx, req.(*GetBooksByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBooksByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBooksByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBooksByGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBooksByGenre(ctx, req.(*GetBooksByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ModifyBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ModifyBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ModifyBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ModifyBookByID(ctx, req.(*ModifyBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteBookByID(ctx, req.(*DeleteBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AddGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddGenre(ctx, req.(*AddGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllGenres_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllGenresRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetAllGenres(m, &grpc.GenericServerStream[GetAllGenresRequest, GetAllGenresResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProductService_GetAllGenresServer = grpc.ServerStreamingServer[GetAllGenresResponse]

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthor",
			Handler:    _ProductService_AddAuthor_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _ProductService_AddBook_Handler,
		},
		{
			MethodName: "GetBookByID",
			Handler:    _ProductService_GetBookByID_Handler,
		},
		{
			MethodName: "GetBooksByTitle",
			Handler:    _ProductService_GetBooksByTitle_Handler,
		},
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _ProductService_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetBooksByGenre",
			Handler:    _ProductService_GetBooksByGenre_Handler,
		},
		{
			MethodName: "ModifyBookByID",
			Handler:    _ProductService_ModifyBookByID_Handler,
		},
		{
			MethodName: "DeleteBookByID",
			Handler:    _ProductService_DeleteBookByID_Handler,
		},
		{
			MethodName: "AddGenre",
			Handler:    _ProductService_AddGenre_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAuthors",
			Handler:       _ProductService_GetAllAuthors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBooks",
			Handler:       _ProductService_GetAllBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllGenres",
			Handler:       _ProductService_GetAllGenres_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product/v1/product.proto",
}
